x1 = study_1_data$x1
x2 = study_1_data$x2
x3 = study_1_data$x3
# Significant Model beta values
sig_beta_0 = 3
sig_beta_1 = 1
sig_beta_2 = 1
sig_beta_3 = 1
# Non-Significant Model beta values
non_beta_0 = 3
non_beta_1 = 0
non_beta_2 = 0
non_beta_3 = 0
sigma = c(1, 5, 10)
simulations = 2500
sim1_data = data.frame(sig_f = rep(0, simulations), sig_p = rep(0, simulations), sig_r = rep(0, simulations),
non_f = rep(0, simulations), non_p = rep(0, simulations), non_r = rep(0, simulations))
for (iter in 1:simulations) {
eps = rnorm(n, mean = 0, sd = sigma[1])
study_1_data$y = sig_beta_0 + sig_beta_1 * x1 + sig_beta_2 * x2 + sig_beta_3 * x3 + eps
sig_model = lm(y ~ ., data = study_1_data)
sim1_data$sig_f[iter] = summary(sig_model)$fstatistic[[1]]
sim1_data$sig_p[iter] = pf(summary(sig_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim1_data$sig_r[iter] = summary(sig_model)$r.squared
study_1_data$y = non_beta_0 + non_beta_1 * x1 + non_beta_2 * x2 + non_beta_3 * x3 + eps
non_model = lm(y ~ ., data = study_1_data)
sim1_data$non_f[iter] = summary(non_model)$fstatistic[[1]]
sim1_data$non_p[iter] = pf(summary(non_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim1_data$non_r[iter] = summary(non_model)$r.squared
}
sim2_data = data.frame(sig_f = rep(0, simulations), sig_p = rep(0, simulations), sig_r = rep(0, simulations),
non_f = rep(0, simulations), non_p = rep(0, simulations), non_r = rep(0, simulations))
for (iter in 1:simulations) {
eps = rnorm(n, mean = 0, sd = sigma[2])
study_1_data$y = sig_beta_0 + sig_beta_1 * x1 + sig_beta_2 * x2 + sig_beta_3 * x3 + eps
sig_model = lm(y ~ ., data = study_1_data)
sim2_data$sig_f[iter] = summary(sig_model)$fstatistic[[1]]
sim2_data$sig_p[iter] = pf(summary(sig_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim2_data$sig_r[iter] = summary(sig_model)$r.squared
study_1_data$y = non_beta_0 + non_beta_1 * x1 + non_beta_2 * x2 + non_beta_3 * x3 + eps
non_model = lm(y ~ ., data = study_1_data)
sim2_data$non_f[iter] = summary(non_model)$fstatistic[[1]]
sim2_data$non_p[iter] = pf(summary(non_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim2_data$non_r[iter] = summary(non_model)$r.squared
}
sim3_data = data.frame(sig_f = rep(0, simulations), sig_p = rep(0, simulations), sig_r = rep(0, simulations),
non_f = rep(0, simulations), non_p = rep(0, simulations), non_r = rep(0, simulations))
for (iter in 1:simulations) {
eps = rnorm(n, mean = 0, sd = sigma[3])
study_1_data$y = sig_beta_0 + sig_beta_1 * x1 + sig_beta_2 * x2 + sig_beta_3 * x3 + eps
sig_model = lm(y ~ ., data = study_1_data)
sim3_data$sig_f[iter] = summary(sig_model)$fstatistic[[1]]
sim3_data$sig_p[iter] = pf(summary(sig_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim3_data$sig_r[iter] = summary(sig_model)$r.squared
study_1_data$y = non_beta_0 + non_beta_1 * x1 + non_beta_2 * x2 + non_beta_3 * x3 + eps
non_model = lm(y ~ ., data = study_1_data)
sim3_data$non_f[iter] = summary(non_model)$fstatistic[[1]]
sim3_data$non_p[iter] = pf(summary(non_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim3_data$non_r[iter] = summary(non_model)$r.squared
}
par(mfrow=c(3, 1))
hist(sim1_data$non_f, main = expression(paste("Non-Significant F - ", sigma, " = 1")), prob = TRUE, breaks = 50)
x = sim1_data$non_f
curve(df(x, df1 = p - 1, df2 = n - p), col = "Orange", add = TRUE, lwd = 3)
hist(sim2_data$non_f, main = expression(paste("Non-Significant F - ", sigma, " = 5")), prob = TRUE, breaks = 50)
x = sim2_data$non_f
curve(df(x, df1 = p - 1, df2 = n - p), col = "Orange", add = TRUE, lwd = 3)
hist(sim3_data$non_f, main = expression(paste("Non-Significant F - ", sigma, " = 10")), prob = TRUE, breaks = 50)
x = sim3_data$non_f
curve(df(x, df1 = p - 1, df2 = n - p), col = "Orange", add = TRUE, lwd = 3)
hist(sim1_data$non_p, main = expression(paste("Non-Significant P-Value - ", sigma, " = 1")), prob = TRUE, breaks = 40)
x = sim1_data$non_p
curve(dunif(x), col='orange', add=TRUE, lwd=3)
par(mfrow=c(3,1))
hist(sim1_data$non_p, main = expression(paste("Non-Significant P-Value - ", sigma, " = 1")), prob = TRUE, breaks = 40)
x = sim1_data$non_p
curve(dunif(x), col='orange', add=TRUE, lwd=3)
hist(sim3_data$non_p, main = expression(paste("Non-Significant P-Value - ", sigma, " = 10")), prob = TRUE, breaks = 40)
x = sim3_data$non_p
curve(dunif(x), col='orange', add=TRUE, lwd=3)
hist(sim1_data$non_r, main = expression(paste("Non-Significant ", R^2, " - ", sigma, " = 1")), prob = TRUE, breaks = 40)
x = sim1_data$non_r
curve(dbeta(x, (p-1)/2, (n-p)/2), col='orange', add=TRUE, lwd=3)
hist(sim2_data$non_r, main = expression(paste("Non-Significant ", R^2, " - ", sigma, " = 5")), prob = TRUE, breaks = 40)
x = sim2_data$non_r
curve(dbeta(x, (p-1)/2, (n-p)/2), col='orange', add=TRUE, lwd=3)
hist(sim2_data$non_r, main = expression(paste("Non-Significant ", R^2, " - ", sigma, " = 10")), prob = TRUE, breaks = 40)
x = sim2_data$non_r
curve(dbeta(x, (p-1)/2, (n-p)/2), col='orange', add=TRUE, lwd=3)
hist(sim3_data$non_r, main = expression(paste("Non-Significant ", R^2, " - ", sigma, " = 10")), prob = TRUE, breaks = 40)
x = sim3_data$non_r
curve(dbeta(x, (p-1)/2, (n-p)/2), col='orange', add=TRUE, lwd=3)
birthday = 19890927
set.seed(birthday)
library(readr)
study_1_data = read_csv("study_1.csv")
n = 25
p = 3 + 1
x0 = rep(1, n)
x1 = study_1_data$x1
x2 = study_1_data$x2
x3 = study_1_data$x3
# Significant Model beta values
sig_beta_0 = 3
sig_beta_1 = 1
sig_beta_2 = 1
sig_beta_3 = 1
# Non-Significant Model beta values
non_beta_0 = 3
non_beta_1 = 0
non_beta_2 = 0
non_beta_3 = 0
sigma = c(1, 5, 10)
simulations = 2500
sim1_data = data.frame(sig_f = rep(0, simulations), sig_p = rep(0, simulations), sig_r = rep(0, simulations),
non_f = rep(0, simulations), non_p = rep(0, simulations), non_r = rep(0, simulations))
for (iter in 1:simulations) {
eps = rnorm(n, mean = 0, sd = sigma[1])
study_1_data$y = sig_beta_0 + sig_beta_1 * x1 + sig_beta_2 * x2 + sig_beta_3 * x3 + eps
sig_model = lm(y ~ ., data = study_1_data)
sim1_data$sig_f[iter] = summary(sig_model)$fstatistic[[1]]
sim1_data$sig_p[iter] = pf(summary(sig_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim1_data$sig_r[iter] = summary(sig_model)$r.squared
study_1_data$y = non_beta_0 + non_beta_1 * x1 + non_beta_2 * x2 + non_beta_3 * x3 + eps
non_model = lm(y ~ ., data = study_1_data)
sim1_data$non_f[iter] = summary(non_model)$fstatistic[[1]]
sim1_data$non_p[iter] = pf(summary(non_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim1_data$non_r[iter] = summary(non_model)$r.squared
}
sim2_data = data.frame(sig_f = rep(0, simulations), sig_p = rep(0, simulations), sig_r = rep(0, simulations),
non_f = rep(0, simulations), non_p = rep(0, simulations), non_r = rep(0, simulations))
for (iter in 1:simulations) {
eps = rnorm(n, mean = 0, sd = sigma[2])
study_1_data$y = sig_beta_0 + sig_beta_1 * x1 + sig_beta_2 * x2 + sig_beta_3 * x3 + eps
sig_model = lm(y ~ ., data = study_1_data)
sim2_data$sig_f[iter] = summary(sig_model)$fstatistic[[1]]
sim2_data$sig_p[iter] = pf(summary(sig_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim2_data$sig_r[iter] = summary(sig_model)$r.squared
study_1_data$y = non_beta_0 + non_beta_1 * x1 + non_beta_2 * x2 + non_beta_3 * x3 + eps
non_model = lm(y ~ ., data = study_1_data)
sim2_data$non_f[iter] = summary(non_model)$fstatistic[[1]]
sim2_data$non_p[iter] = pf(summary(non_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim2_data$non_r[iter] = summary(non_model)$r.squared
}
sim3_data = data.frame(sig_f = rep(0, simulations), sig_p = rep(0, simulations), sig_r = rep(0, simulations),
non_f = rep(0, simulations), non_p = rep(0, simulations), non_r = rep(0, simulations))
for (iter in 1:simulations) {
eps = rnorm(n, mean = 0, sd = sigma[3])
study_1_data$y = sig_beta_0 + sig_beta_1 * x1 + sig_beta_2 * x2 + sig_beta_3 * x3 + eps
sig_model = lm(y ~ ., data = study_1_data)
sim3_data$sig_f[iter] = summary(sig_model)$fstatistic[[1]]
sim3_data$sig_p[iter] = pf(summary(sig_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim3_data$sig_r[iter] = summary(sig_model)$r.squared
study_1_data$y = non_beta_0 + non_beta_1 * x1 + non_beta_2 * x2 + non_beta_3 * x3 + eps
non_model = lm(y ~ ., data = study_1_data)
sim3_data$non_f[iter] = summary(non_model)$fstatistic[[1]]
sim3_data$non_p[iter] = pf(summary(non_model)$fstatistic[[1]], df1 = p - 1, df2 = n - p, lower.tail = FALSE)
sim3_data$non_r[iter] = summary(non_model)$r.squared
}
hist(sim1_data$non_f, main = expression(paste("Non-Significant F - ", sigma, " = 1")), prob = TRUE, breaks = 50)
x = sim1_data$non_f
curve(df(x, df1 = p - 1, df2 = n - p), col = "Orange", add = TRUE, lwd = 3)
hist(sim2_data$non_f, main = expression(paste("Non-Significant F - ", sigma, " = 5")), prob = TRUE, breaks = 50)
x = sim2_data$non_f
curve(df(x, df1 = p - 1, df2 = n - p), col = "Orange", add = TRUE, lwd = 3)
hist(sim3_data$non_f, main = expression(paste("Non-Significant F - ", sigma, " = 10")), prob = TRUE, breaks = 50)
x = sim3_data$non_f
curve(df(x, df1 = p - 1, df2 = n - p), col = "Orange", add = TRUE, lwd = 3)
hist(sim1_data$non_p, main = expression(paste("Non-Significant P-Value - ", sigma, " = 1")), prob = TRUE, breaks = 40)
x = sim1_data$non_p
curve(dunif(x), col='orange', add=TRUE, lwd=3)
hist(sim1_data$non_p, main = expression(paste("Non-Significant P-Value - ", sigma, " = 1")), prob = TRUE, breaks = 40)
x = sim1_data$non_p
curve(dunif(x), col='orange', add=TRUE, lwd=3)
hist(sim3_data$non_p, main = expression(paste("Non-Significant P-Value - ", sigma, " = 10")), prob = TRUE, breaks = 40)
x = sim3_data$non_p
curve(dunif(x), col='orange', add=TRUE, lwd=3)
hist(sim1_data$non_r, main = expression(paste("Non-Significant ", R^2, " - ", sigma, " = 1")), prob = TRUE, breaks = 40)
x = sim1_data$non_r
curve(dbeta(x, (p-1)/2, (n-p)/2), col='orange', add=TRUE, lwd=3)
hist(sim2_data$non_r, main = expression(paste("Non-Significant ", R^2, " - ", sigma, " = 5")), prob = TRUE, breaks = 40)
x = sim2_data$non_r
curve(dbeta(x, (p-1)/2, (n-p)/2), col='orange', add=TRUE, lwd=3)
hist(sim3_data$non_r, main = expression(paste("Non-Significant ", R^2, " - ", sigma, " = 10")), prob = TRUE, breaks = 40)
x = sim3_data$non_r
curve(dbeta(x, (p-1)/2, (n-p)/2), col='orange', add=TRUE, lwd=3)
birthday = 19890927
set.seed(birthday)
library(readr)
study_2_data = read_csv("study_2.csv")
n = nrow(study_2_data)
p = 3 + 1
x0 = rep(1, n)
x1 = study_2_data$x1
x2 = study_2_data$x2
x3 = study_2_data$x3
x4 = study_2_data$x4
x5 = study_2_data$x5
x6 = study_2_data$x6
sigma = c(1, 2, 4)
beta_0 = 0
beta_1 = 5
beta_2 = -4
beta_3 = 1.6
beta_4 = -1.1
beta_5 = 0.7
beta_6 = 0.3
simulations = 1000
calculate_rmse  = function(actual, predicted) {
return(sqrt(mean((actual - predicted)^2)))
}
sim1_rmse_train = data.frame(model_1 = rep(0, simulations), model_2 = rep(0, simulations), model_3 = rep(0, simulations),
model_4 = rep(0, simulations), model_5 = rep(0, simulations), model_6 = rep(0, simulations),
model_7 = rep(0, simulations), model_8 = rep(0, simulations), model_9 = rep(0, simulations))
sim1_rmse_test = data.frame(model_1 = rep(0, simulations), model_2 = rep(0, simulations), model_3 = rep(0, simulations),
model_4 = rep(0, simulations), model_5 = rep(0, simulations), model_6 = rep(0, simulations),
model_7 = rep(0, simulations), model_8 = rep(0, simulations), model_9 = rep(0, simulations))
for (iter in 1:simulations) {
eps = rnorm(n, mean = 0, sd = sigma[1])
study_2_data$y = beta_0 + beta_1 * x1 +  beta_2 * x2 + beta_3 * x3 + beta_4 * x4 + beta_5 * x5 + beta_6 * x6 + eps
train_index = sample(n / 2)
train_data = study_2_data[train_index,]
test_data = study_2_data[-train_index,]
model_1 = lm(y ~ x1, data = train_data)
model_2 = lm(y ~ x1 + x2, data = train_data)
model_3 = lm(y ~ x1 + x2 + x3, data = train_data)
model_4 = lm(y ~ x1 + x2 + x3 + x4, data = train_data)
model_5 = lm(y ~ x1 + x2 + x3 + x4 + x5, data = train_data)
model_6 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6, data = train_data)
model_7 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7, data = train_data)
model_8 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8, data = train_data)
model_9 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9, data = train_data)
sim1_rmse_train$model_1[iter] = calculate_rmse(train_data$y, predict(model_1, train_data))
sim1_rmse_train$model_2[iter] = calculate_rmse(train_data$y, predict(model_2, train_data))
sim1_rmse_train$model_3[iter] = calculate_rmse(train_data$y, predict(model_3, train_data))
sim1_rmse_train$model_4[iter] = calculate_rmse(train_data$y, predict(model_4, train_data))
sim1_rmse_train$model_5[iter] = calculate_rmse(train_data$y, predict(model_5, train_data))
sim1_rmse_train$model_6[iter] = calculate_rmse(train_data$y, predict(model_6, train_data))
sim1_rmse_train$model_7[iter] = calculate_rmse(train_data$y, predict(model_7, train_data))
sim1_rmse_train$model_8[iter] = calculate_rmse(train_data$y, predict(model_8, train_data))
sim1_rmse_train$model_9[iter] = calculate_rmse(train_data$y, predict(model_9, train_data))
sim1_rmse_test$model_1[iter] = calculate_rmse(test_data$y, predict(model_1, test_data))
sim1_rmse_test$model_2[iter] = calculate_rmse(test_data$y, predict(model_2, test_data))
sim1_rmse_test$model_3[iter] = calculate_rmse(test_data$y, predict(model_3, test_data))
sim1_rmse_test$model_4[iter] = calculate_rmse(test_data$y, predict(model_4, test_data))
sim1_rmse_test$model_5[iter] = calculate_rmse(test_data$y, predict(model_5, test_data))
sim1_rmse_test$model_6[iter] = calculate_rmse(test_data$y, predict(model_6, test_data))
sim1_rmse_test$model_7[iter] = calculate_rmse(test_data$y, predict(model_7, test_data))
sim1_rmse_test$model_8[iter] = calculate_rmse(test_data$y, predict(model_8, test_data))
sim1_rmse_test$model_9[iter] = calculate_rmse(test_data$y, predict(model_9, test_data))
}
sim2_rmse_train = data.frame(model_1 = rep(0, simulations), model_2 = rep(0, simulations), model_3 = rep(0, simulations),
model_4 = rep(0, simulations), model_5 = rep(0, simulations), model_6 = rep(0, simulations),
model_7 = rep(0, simulations), model_8 = rep(0, simulations), model_9 = rep(0, simulations))
sim2_rmse_test = data.frame(model_1 = rep(0, simulations), model_2 = rep(0, simulations), model_3 = rep(0, simulations),
model_4 = rep(0, simulations), model_5 = rep(0, simulations), model_6 = rep(0, simulations),
model_7 = rep(0, simulations), model_8 = rep(0, simulations), model_9 = rep(0, simulations))
for (iter in 1:simulations) {
eps = rnorm(n, mean = 0, sd = sigma[2])
study_2_data$y = beta_0 + beta_1 * x1 +  beta_2 * x2 + beta_3 * x3 + beta_4 * x4 + beta_5 * x5 + beta_6 * x6 + eps
train_index = sample(n / 2)
train_data = study_2_data[train_index,]
test_data = study_2_data[-train_index,]
model_1 = lm(y ~ x1, data = train_data)
model_2 = lm(y ~ x1 + x2, data = train_data)
model_3 = lm(y ~ x1 + x2 + x3, data = train_data)
model_4 = lm(y ~ x1 + x2 + x3 + x4, data = train_data)
model_5 = lm(y ~ x1 + x2 + x3 + x4 + x5, data = train_data)
model_6 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6, data = train_data)
model_7 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7, data = train_data)
model_8 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8, data = train_data)
model_9 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9, data = train_data)
sim2_rmse_train$model_1[iter] = calculate_rmse(train_data$y, predict(model_1, train_data))
sim2_rmse_train$model_2[iter] = calculate_rmse(train_data$y, predict(model_2, train_data))
sim2_rmse_train$model_3[iter] = calculate_rmse(train_data$y, predict(model_3, train_data))
sim2_rmse_train$model_4[iter] = calculate_rmse(train_data$y, predict(model_4, train_data))
sim2_rmse_train$model_5[iter] = calculate_rmse(train_data$y, predict(model_5, train_data))
sim2_rmse_train$model_6[iter] = calculate_rmse(train_data$y, predict(model_6, train_data))
sim2_rmse_train$model_7[iter] = calculate_rmse(train_data$y, predict(model_7, train_data))
sim2_rmse_train$model_8[iter] = calculate_rmse(train_data$y, predict(model_8, train_data))
sim2_rmse_train$model_9[iter] = calculate_rmse(train_data$y, predict(model_9, train_data))
sim2_rmse_test$model_1[iter] = calculate_rmse(test_data$y, predict(model_1, test_data))
sim2_rmse_test$model_2[iter] = calculate_rmse(test_data$y, predict(model_2, test_data))
sim2_rmse_test$model_3[iter] = calculate_rmse(test_data$y, predict(model_3, test_data))
sim2_rmse_test$model_4[iter] = calculate_rmse(test_data$y, predict(model_4, test_data))
sim2_rmse_test$model_5[iter] = calculate_rmse(test_data$y, predict(model_5, test_data))
sim2_rmse_test$model_6[iter] = calculate_rmse(test_data$y, predict(model_6, test_data))
sim2_rmse_test$model_7[iter] = calculate_rmse(test_data$y, predict(model_7, test_data))
sim2_rmse_test$model_8[iter] = calculate_rmse(test_data$y, predict(model_8, test_data))
sim2_rmse_test$model_9[iter] = calculate_rmse(test_data$y, predict(model_9, test_data))
}
sim3_rmse_train = data.frame(model_1 = rep(0, simulations), model_2 = rep(0, simulations), model_3 = rep(0, simulations),
model_4 = rep(0, simulations), model_5 = rep(0, simulations), model_6 = rep(0, simulations),
model_7 = rep(0, simulations), model_8 = rep(0, simulations), model_9 = rep(0, simulations))
sim3_rmse_test = data.frame(model_1 = rep(0, simulations), model_2 = rep(0, simulations), model_3 = rep(0, simulations),
model_4 = rep(0, simulations), model_5 = rep(0, simulations), model_6 = rep(0, simulations),
model_7 = rep(0, simulations), model_8 = rep(0, simulations), model_9 = rep(0, simulations))
for (iter in 1:simulations) {
eps = rnorm(n, mean = 0, sd = sigma[3])
study_2_data$y = beta_0 + beta_1 * x1 +  beta_2 * x2 + beta_3 * x3 + beta_4 * x4 + beta_5 * x5 + beta_6 * x6 + eps
train_index = sample(n / 2)
train_data = study_2_data[train_index,]
test_data = study_2_data[-train_index,]
model_1 = lm(y ~ x1, data = train_data)
model_2 = lm(y ~ x1 + x2, data = train_data)
model_3 = lm(y ~ x1 + x2 + x3, data = train_data)
model_4 = lm(y ~ x1 + x2 + x3 + x4, data = train_data)
model_5 = lm(y ~ x1 + x2 + x3 + x4 + x5, data = train_data)
model_6 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6, data = train_data)
model_7 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7, data = train_data)
model_8 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8, data = train_data)
model_9 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9, data = train_data)
sim3_rmse_train$model_1[iter] = calculate_rmse(train_data$y, predict(model_1, train_data))
sim3_rmse_train$model_2[iter] = calculate_rmse(train_data$y, predict(model_2, train_data))
sim3_rmse_train$model_3[iter] = calculate_rmse(train_data$y, predict(model_3, train_data))
sim3_rmse_train$model_4[iter] = calculate_rmse(train_data$y, predict(model_4, train_data))
sim3_rmse_train$model_5[iter] = calculate_rmse(train_data$y, predict(model_5, train_data))
sim3_rmse_train$model_6[iter] = calculate_rmse(train_data$y, predict(model_6, train_data))
sim3_rmse_train$model_7[iter] = calculate_rmse(train_data$y, predict(model_7, train_data))
sim3_rmse_train$model_8[iter] = calculate_rmse(train_data$y, predict(model_8, train_data))
sim3_rmse_train$model_9[iter] = calculate_rmse(train_data$y, predict(model_9, train_data))
sim3_rmse_test$model_1[iter] = calculate_rmse(test_data$y, predict(model_1, test_data))
sim3_rmse_test$model_2[iter] = calculate_rmse(test_data$y, predict(model_2, test_data))
sim3_rmse_test$model_3[iter] = calculate_rmse(test_data$y, predict(model_3, test_data))
sim3_rmse_test$model_4[iter] = calculate_rmse(test_data$y, predict(model_4, test_data))
sim3_rmse_test$model_5[iter] = calculate_rmse(test_data$y, predict(model_5, test_data))
sim3_rmse_test$model_6[iter] = calculate_rmse(test_data$y, predict(model_6, test_data))
sim3_rmse_test$model_7[iter] = calculate_rmse(test_data$y, predict(model_7, test_data))
sim3_rmse_test$model_8[iter] = calculate_rmse(test_data$y, predict(model_8, test_data))
sim3_rmse_test$model_9[iter] = calculate_rmse(test_data$y, predict(model_9, test_data))
}
sigma_1_train = apply(sim1_rmse_train, 2, mean)
sigma_2_train = apply(sim2_rmse_train, 2, mean)
sigma_3_train = apply(sim3_rmse_train, 2, mean)
sigma_1_test = apply(sim1_rmse_test, 2, mean)
sigma_2_test = apply(sim2_rmse_test, 2, mean)
sigma_3_test = apply(sim3_rmse_test, 2, mean)
x = seq(1, 10, 1)
x
apply(sim3_rmse_test, 2, mean)
sigma_1_train = apply(sim1_rmse_train, 2, mean)
sigma_2_train = apply(sim2_rmse_train, 2, mean)
sigma_3_train = apply(sim3_rmse_train, 2, mean)
sigma_1_test = apply(sim1_rmse_test, 2, mean)
sigma_2_test = apply(sim2_rmse_test, 2, mean)
sigma_3_test = apply(sim3_rmse_test, 2, mean)
train_test_data = cbind(sigma_1_train, sigma_2_train, sigma_3_train, sigma_1_test, sigma_2_test, sigma_3_test)
train_test_data = cbind(x, sigma_1_train, sigma_2_train, sigma_3_train, sigma_1_test, sigma_2_test, sigma_3_test)
View(train_test_data)
sigma_1_test
train_test_data = cbind(x, sigma_1_train, sigma_2_train, sigma_3_train, sigma_1_test, sigma_2_test, sigma_3_test)
x = seq(1, 9, 1)
sigma_1_train = apply(sim1_rmse_train, 2, mean)
sigma_2_train = apply(sim2_rmse_train, 2, mean)
sigma_3_train = apply(sim3_rmse_train, 2, mean)
sigma_1_test = apply(sim1_rmse_test, 2, mean)
sigma_2_test = apply(sim2_rmse_test, 2, mean)
sigma_3_test = apply(sim3_rmse_test, 2, mean)
train_test_data = cbind(x, sigma_1_train, sigma_2_train, sigma_3_train, sigma_1_test, sigma_2_test, sigma_3_test)
View(train_test_data)
library(ggplot2)
x_vals = seq(1, 9, 1)
sigma_1_train = apply(sim1_rmse_train, 2, mean)
sigma_2_train = apply(sim2_rmse_train, 2, mean)
sigma_3_train = apply(sim3_rmse_train, 2, mean)
sigma_1_test = apply(sim1_rmse_test, 2, mean)
sigma_2_test = apply(sim2_rmse_test, 2, mean)
sigma_3_test = apply(sim3_rmse_test, 2, mean)
train_test_data = cbind(x, sigma_1_train, sigma_2_train, sigma_3_train, sigma_1_test, sigma_2_test, sigma_3_test)
ggplot(data=train_test_data, aes(x = x_vals)) +
geom_line(aes(x = x_vals, y = sigma_1_train, color = "red"), size=1) +
geom_line(aes(x = x_vals, y = sigma_2_train, color = "orange"), size=1) +
geom_line(aes(x = x_vals, y = sigma_3_train, color = "blue"), size=1) +
geom_line(aes(x = x_vals, y = sigma_1_test, color = "green"), size=1) +
geom_line(aes(x = x_vals, y = sigma_2_test, color = "purple"), size=1) +
geom_line(aes(x = x_vals, y = sigma_3_test, color = "yellow"), size=1) +
xlab("Model Size") +
ylab("RMSE") +
ggtitle("RMSE vs Model Size")
library(ggplot2)
x_vals = seq(1, 9, 1)
sigma_1_train = apply(sim1_rmse_train, 2, mean)
sigma_2_train = apply(sim2_rmse_train, 2, mean)
sigma_3_train = apply(sim3_rmse_train, 2, mean)
sigma_1_test = apply(sim1_rmse_test, 2, mean)
sigma_2_test = apply(sim2_rmse_test, 2, mean)
sigma_3_test = apply(sim3_rmse_test, 2, mean)
train_test_data = cbind(x, sigma_1_train, sigma_2_train, sigma_3_train, sigma_1_test, sigma_2_test, sigma_3_test)
colnames(train_test_data) = c("x_vals", "sigma_1_train", "sigma_2_train", "sigma_3_train", "sigma_1_test", "sigma_2_test", "sigma_3_test")
ggplot(data=train_test_data, aes(x = x_vals)) +
geom_line(aes(x = x_vals, y = sigma_1_train, color = "red"), size=1) +
geom_line(aes(x = x_vals, y = sigma_2_train, color = "orange"), size=1) +
geom_line(aes(x = x_vals, y = sigma_3_train, color = "blue"), size=1) +
geom_line(aes(x = x_vals, y = sigma_1_test, color = "green"), size=1) +
geom_line(aes(x = x_vals, y = sigma_2_test, color = "purple"), size=1) +
geom_line(aes(x = x_vals, y = sigma_3_test, color = "yellow"), size=1) +
xlab("Model Size") +
ylab("RMSE") +
ggtitle("RMSE vs Model Size")
View(train_test_data)
library(ggplot2)
x_vals = seq(1, 9, 1)
sigma_1_train = apply(sim1_rmse_train, 2, mean)
sigma_2_train = apply(sim2_rmse_train, 2, mean)
sigma_3_train = apply(sim3_rmse_train, 2, mean)
sigma_1_test = apply(sim1_rmse_test, 2, mean)
sigma_2_test = apply(sim2_rmse_test, 2, mean)
sigma_3_test = apply(sim3_rmse_test, 2, mean)
train_test_data = data.frame(x_vals, sigma_1_train, sigma_2_train, sigma_3_train, sigma_1_test, sigma_2_test, sigma_3_test)
colnames(train_test_data) = c("x_vals", "sigma_1_train", "sigma_2_train", "sigma_3_train", "sigma_1_test", "sigma_2_test", "sigma_3_test")
ggplot(data=train_test_data, aes(x = x_vals)) +
geom_line(aes(x = x_vals, y = sigma_1_train, color = "red"), size=1) +
geom_line(aes(x = x_vals, y = sigma_2_train, color = "orange"), size=1) +
geom_line(aes(x = x_vals, y = sigma_3_train, color = "blue"), size=1) +
geom_line(aes(x = x_vals, y = sigma_1_test, color = "green"), size=1) +
geom_line(aes(x = x_vals, y = sigma_2_test, color = "purple"), size=1) +
geom_line(aes(x = x_vals, y = sigma_3_test, color = "yellow"), size=1) +
xlab("Model Size") +
ylab("RMSE") +
ggtitle("RMSE vs Model Size")
369 * 2
power_data = data.frame(sigma = rep(0, number_iterations), n = rep(0, number_iterations),
beta_1 = rep(0, number_iterations), power = rep(0, number_iterations))
i = 1
for (sigma in sigmas) {
for (n in samples) {
x_values = seq(0, 5, length = n)
for (beta_1 in beta_1_list) {
rejected = 0
for (iter in 1:simulations) {
eps = rnorm(n, 0, sigma)
y = beta_0 + beta_1 * x_values + eps
model = lm(y ~ x_values)
beta_1_p = summary(model)$coefficients[2, 4]
if (beta_1_p < alpha) {
rejected = rejected + 1
}
}
power = rejected / simulations
power_data$sigma[i] = sigma
power_data$n[i] = n
power_data$beta_1[i] = beta_1
power_data$power[i] = power
i = i + 1
}
}
}
power1 = power_data[which((power_data$n == 10) & (power_data$sigma == 1)), c("beta_1", "power")]
power2 = power_data[which((power_data$n == 20) & (power_data$sigma == 1)), c("power")]
power3 = power_data[which((power_data$n == 30) & (power_data$sigma == 1)), c("power")]
power_graph_data = cbind(power1, power2, power3)
colnames(power_graph_data) = c("beta_1", "power_1", "power_2", "power_3")
ggplot(data=power_graph_data, aes(x = beta_1)) + geom_line(aes(x = beta_1, y = power_1, color = "power_1"), size=1) +   geom_line(aes(x = beta_1, y = power_2, color = "power_2"), size=1) +
geom_line(aes(x = beta_1, y = power_3, color = "power_3"), size=1) +
xlab(expression(paste("", beta[1], " values"))) +
ylab("Power") +
ggtitle(expression(paste("Power vs. ", beta[1], " ", sigma, " = 1")))
View(power1)
power1 = power_data[which((power_data$n == 10) & (power_data$sigma == 1)), c("beta_1", "power")]
power2 = power_data[which((power_data$n == 20) & (power_data$sigma == 1)), c("power")]
power3 = power_data[which((power_data$n == 30) & (power_data$sigma == 1)), c("power")]
power_graph_data = data.frame(beta_1 = power1$beta_1, power_1 = power1$power, power_2 = power2$power, power_3 = power3$power)
beta_1 = power_data[which((power_data$n == 10) & (power_data$sigma == 1)), c("beta_1")]
power1 = power_data[which((power_data$n == 10) & (power_data$sigma == 1)), c("power")]
power2 = power_data[which((power_data$n == 20) & (power_data$sigma == 1)), c("power")]
power3 = power_data[which((power_data$n == 30) & (power_data$sigma == 1)), c("power")]
power_graph_data = data.frame(beta_1 = beta_1, power_1 = power1, power_2 = power2, power_3 = power3)
#power_graph_data = cbind(power1, power2, power3)
#colnames(power_graph_data) = c("beta_1", "power_1", "power_2", "power_3")
ggplot(data=power_graph_data, aes(x = beta_1)) + geom_line(aes(x = beta_1, y = power_1, color = "power_1"), size=1) +   geom_line(aes(x = beta_1, y = power_2, color = "power_2"), size=1) +
geom_line(aes(x = beta_1, y = power_3, color = "power_3"), size=1) +
xlab(expression(paste("", beta[1], " values"))) +
ylab("Power") +
ggtitle(expression(paste("Power vs. ", beta[1], " ", sigma, " = 1")))
power1 = power_data[which((power_data$n == 10) & (power_data$sigma == 2)), c("power")]
power2 = power_data[which((power_data$n == 20) & (power_data$sigma == 2)), c("power")]
power3 = power_data[which((power_data$n == 30) & (power_data$sigma == 2)), c("power")]
power_graph_data = data.frame(beta_1 = beta_1, power_1 = power1, power_2 = power2, power_3 = power3)
ggplot(data=power_graph_data, aes(x = beta_1)) + geom_line(aes(x = beta_1, y = power_1, color = "power_1"), size=1) +   geom_line(aes(x = beta_1, y = power_2, color = "power_2"), size=1) +
geom_line(aes(x = beta_1, y = power_3, color = "power_3"), size=1) +
xlab(expression(paste(beta[1], " values"))) +
ylab("Power") +
ggtitle(expression(paste("Power vs. ", beta[1], " ", sigma, " = 2")))
power1 = power_data[which((power_data$n == 10) & (power_data$sigma == 4)), c("power")]
power2 = power_data[which((power_data$n == 20) & (power_data$sigma == 4)), c("power")]
power3 = power_data[which((power_data$n == 30) & (power_data$sigma == 4)), c("power")]
power_graph_data = data.frame(beta_1 = beta_1, power_1 = power1, power_2 = power2, power_3 = power3)
ggplot(data=power_graph_data, aes(x = beta_1)) + geom_line(aes(x = beta_1, y = power_1, color = "power_1"), size=1) +   geom_line(aes(x = beta_1, y = power_2, color = "power_2"), size=1) +
geom_line(aes(x = beta_1, y = power_3, color = "power_3"), size=1) +
xlab(expression(paste(beta[1], " values"))) +
ylab("Power") +
ggtitle(expression(paste("Power vs. ", beta[1], " ", sigma, " = 4")))
barplot(table(factor(colnames(sim3_rmse_test)[apply(sim3_rmse_test, 1, function(x) which.min(x))], levels = colnames(sim3_rmse_test))), las = 2)
#barplot(table(factor(colnames(sim3_rmse_test)[apply(sim3_rmse_test, 1, function(x) which.min(x))], levels = colnames(sim3_rmse_test))), las = 2)
barplot(table(colnames(sim3_rmse_test)[apply(sim3_rmse_test, 1, function(x) which.min(x))], levels = colnames(sim3_rmse_test)), las = 2)
barplot(table(factor(colnames(sim2_rmse_test)[apply(sim2_rmse_test, 1, function(x) which.min(x))], levels = colnames(sim2_rmse_test))), las = 2)
colnames(sim3_rmse_test)[apply(sim3_rmse_test, 1, function(x) which.min(x))]
barplot(table(factor(colnames(sim3_rmse_test)[apply(sim3_rmse_test, 1, function(x) which.min(x))], levels = colnames(sim3_rmse_test))), main = "Simulation 1 RMSE", las = 2)
barplot(table(factor(colnames(sim1_rmse_test)[apply(sim1_rmse_test, 1, function(x) which.min(x))], levels = colnames(sim1_rmse_test))),
main = expression(paste("Simulation 1 RMSE - ", sigma, "= 1")), las = 2)
par(mfrow=c(1,3))
hist(sim1_data$non_r, main = expression(paste("Non-Significant ", R^2, " - ", sigma, " = 1")), prob = TRUE, breaks = 40)
x = sim1_data$non_r
curve(dbeta(x, (p-1)/2, (n-p)/2), col='orange', add=TRUE, lwd=3)
hist(sim2_data$non_r, main = expression(paste("Non-Significant ", R^2, " - ", sigma, " = 5")), prob = TRUE, breaks = 40)
x = sim2_data$non_r
curve(dbeta(x, (p-1)/2, (n-p)/2), col='orange', add=TRUE, lwd=3)
hist(sim3_data$non_r, prob = TRUE, breaks = 40,
main = expression(paste("Non-Significant ", R^2, " - ", sigma, " = 10")),
xlab = expression(R^2))
x = sim3_data$non_r
curve(dbeta(x, (p-1)/2, (n-p)/2), col='orange', add=TRUE, lwd=3)
