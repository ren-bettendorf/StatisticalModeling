beta_1_hats = rep(0, 2500)
beta_0_hats_se = rep(0, 2500)
for(i in 1:2500) {
eps = rnorm(n,mean=0,sd=sigma)
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
beta_0_hats[i] = coef(model)[1]
beta_1_hats[i] = coef(model)[2]
beta_0_hats_se[i] = summary(model)$coefficient[1,2]
}
beta_0 = 5
beta_1 = 2
sigma = 3
Sxx = sum((x - mean(x))^2)
beta_0_hats = rep(0, 2500)
beta_1_hats = rep(0, 2500)
beta_0_hats_se = rep(0, 2500)
beta_1_hats_se = rep(0, 2500)
for(i in 1:2500) {
eps = rnorm(n,mean=0,sd=sigma)
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
beta_0_hats[i] = coef(model)[1]
beta_1_hats[i] = coef(model)[2]
beta_0_hats_se[i] = summary(model)$coefficient[1,2]
beta_1_hats_se[i] = summary(model)$coefficient[2,2]
}
critical_value = qt(0.975, df = length(x) - 2)
lower_95 = beta_1 - critical_value * beta_1_hats_se
upper_95 = beta_1 + critical_value * beta_1_hats_se
critical_value = qt(0.975, df = length(x) - 2)
lower_95 = beta_1 - critical_value * beta_1_hats_se
upper_95 = beta_1 + critical_value * beta_1_hats_se
intervals = data.frame(lower_95 = lower_95, upper_95 = upper_95 )
View(intervals)
subset_intervals <- subset(result, lower_95 < 0 & 0 < upper_95)
subset_intervals <- subset(intervals, lower_95 < 0 & 0 < upper_95)
proportion <- nrow(subset_intervals ) / nrow(intervals)
1 - proportion
subset_intervals <- subset(intervals, lower_95 < 0 & 0 < upper_95)
proportion <- nrow(subset_intervals ) / nrow(intervals)
proportion
critical_value = qt(0.995, df = length(x) - 2)
lower_99 = beta_1 - critical_value * beta_1_hats_se
upper_99 = beta_1 + critical_value * beta_1_hats_se
intervals = data.frame(lower_99 = lower_99, upper_99 = upper_99)
subset_intervals = subset(intervals, lower_99 < beta_1 & beta_1 < upper_99)
proportion = nrow(subset_intervals ) / nrow(intervals)
subset_intervals <- subset(intervals, lower_95 < 0 & 0 < upper_95)
proportion <- nrow(subset_intervals ) / nrow(intervals)
subset_intervals = subset(intervals, lower_99 < beta_1 & beta_1 < upper_99)
proportion = nrow(subset_intervals ) / nrow(intervals)
subset_intervals = subset(intervals, lower_99 < beta_1 & beta_1 < upper_99)
proportion = nrow(subset_intervals ) / nrow(intervals)
View(subset_intervals)
subset_intervals = subset(intervals, lower_95 < 0 & 0 < upper_95)
proportion = nrow(subset_intervals ) / nrow(intervals)
critical_value = qt(0.975, df = length(x) - 2)
lower_95 = beta_1 - critical_value * beta_1_hats_se
upper_95 = beta_1 + critical_value * beta_1_hats_se
intervals = data.frame(lower_95 = lower_95, upper_95 = upper_95)
length(x)
length(resid(model))
nrow(intervals)
nrow(subset_intervals)
subset_intervals = subset(intervals, lower_95 < beta_1 & beta_1 < upper_95)
proportion = nrow(subset_intervals) / nrow(intervals)
nrow(subset_intervals)
View(subset_intervals)
subset_intervals = subset(intervals, lower_95 < 0 & 0 < upper_95)
proportion = nrow(subset_intervals ) / nrow(intervals)
proportion
critical_value = qt(0.995, df = length(x) - 2)
lower_99 = beta_1 - critical_value * beta_1_hats_se
upper_99 = beta_1 + critical_value * beta_1_hats_se
intervals = data.frame(lower_99 = lower_99, upper_99 = upper_99)
subset_intervals = subset(intervals, lower_99 < beta_1 & beta_1 < upper_99)
proportion = nrow(subset_intervals ) / nrow(intervals)
proportion
View(subset_intervals)
subset_intervals = subset(intervals, lower_95 < 0 & 0 < upper_95)
proportion = nrow(subset_intervals ) / nrow(intervals)
subset_intervals = subset(intervals, lower_95 < 0 & 0 < upper_95)
proportion = nrow(subset_intervals ) / nrow(intervals)
proportion
subset_intervals = subset(intervals, lower_99 < 0 & 0 < upper_99)
proportion = nrow(subset_intervals) / nrow(intervals)
proportion
?predict
calc_pred_int = function(model, newdata, level = 0.95) {
estimate = predict(model, newdata)
n = length(model$residuals)
x_mean = mean(model$model[,2])
alpha = 1- level
se = model$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (newdata[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
return(list(estimate=estimate, lower=lower, upper=upper))
}
new_weights = data.frame(Bwt = c(2.1))
calc_pred_int(cat_model, newdata = new_weights)
calc_pred_int = function(model, newdata, level = 0.95) {
estimate = predict(model, newdata)
estimate
n = length(model$residuals)
x_mean = mean(model$model[,2])
alpha = 1- level
se = model$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (newdata[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
lower
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
upper
return(list(estimate=estimate, lower=lower, upper=upper))
}
new_weights = data.frame(Bwt = c(2.1))
calc_pred_int(cat_model, newdata = new_weights)
new_weights = data.frame(Bwt = c(2.1))
value = calc_pred_int(cat_model, newdata = new_weights)
View(value)
value$estimate
value$lower
summary(cat_model)
cat_model_test_info
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata)
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=newdata)
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
estimate
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1- level
leve = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
estimate
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1- level
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
estimate
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1- level
se = cat_model$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data, interval = c("prediction"))
estimate
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1- level
se = cat_model$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data, interval = c("prediction"))
estimate
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1- level
se = cat_model$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
predict(cat_model, newdata = new_data, interval = c("prediction"), level = level)
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
estimate
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1- level
se = cat_model$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
estimate
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1- level
se = cat_model$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
lower
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
upper
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
estimate
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1- level
se = cat_model$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
rad
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
lower
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
upper
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1- level
se = cat_model$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
rad
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1- level
se = cat_model$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
Sxx
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1 - level
se = cat_model$sigma
se
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
View(cat_model)
summary(cat_model)
summary(cat_model)$sigma
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1 - level
se = summary(cat_model)$sigma
se
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1 - level
se = summary(cat_model)$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
lower
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1 - level
se = summary(cat_model)$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
lower
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
upper
level = 0.95
new_data = data.frame(Bwt = c(2.1))
estimate = predict(cat_model, newdata=new_data)
n = length(cat_model$residuals)
x_mean = mean(cat_model$model[,2])
alpha = 1 - level
se = summary(cat_model)$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((cat_model$model[,2] - x_mean)^2)
rad = 1 + 1 / n + (new_data[1] - x_mean)^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
upper
calc_pred_int = function(model, newdata, level = 0.95) {
estimate = predict(model, newdata=newdata)
n = length(model$residuals)
x = model$model[,2]
alpha = 1 - level
se = summary(model)$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((x - mean(x))^2)
rad = 1 + 1 / n + (new_data[1] - mean(x))^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
return(list(estimate=estimate, lower=lower, upper=upper))
}
new_weights = data.frame(Bwt = c(2.1))
value = calc_pred_int(cat_model, newdata = new_weights)
value
predict(cat_model, newdata = new_data, interval = c("prediction"), level = level)
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
predict(cat_model, newdata = newcat_1, interval = c("prediction"), level = level)
newcat_1 = data.frame(Bwt = 4.0)
value = calc_pred_int(cat_model, newcat_1)
value
estimate = predict(cat_model, newdata=newcat_1)
n = length(cat_model$residuals)
x = cat_model$model[,2]
alpha = 1 - level
se = summary(cat_model)$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((x - mean(x))^2)
rad = 1 + 1 / n + (new_data[1] - mean(x))^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
estimate = predict(cat_model, newdata=newcat_1)
n = length(cat_model$residuals)
x = cat_model$model[,2]
alpha = 1 - level
se = summary(cat_model)$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((x - mean(x))^2)
rad = 1 + 1 / n + (new_data[1] - mean(x))^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
lower
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
estimate = predict(cat_model, newdata=newcat_1)
n = length(cat_model$residuals)
x = cat_model$model[,2]
alpha = 1 - level
se = summary(cat_model)$sigma
se
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((x - mean(x))^2)
rad = 1 + 1 / n + (new_data[1] - mean(x))^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
estimate = predict(cat_model, newdata=newcat_1)
estimate
n = length(cat_model$residuals)
x = cat_model$model[,2]
alpha = 1 - level
se = summary(cat_model)$sigma
conf = level + alpha/2
degree_freedom = n - 2
Sxx = sum((x - mean(x))^2)
rad = 1 + 1 / n + (new_data[1] - mean(x))^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
estimate = predict(cat_model, newdata=newcat_1)
n = length(cat_model$residuals)
degree_freedom = n - 2
x = cat_model$model[,2]
se = summary(cat_model)$sigma
alpha = 1 - level
conf = level + alpha/2
Sxx = sum((x - mean(x))^2)
rad = 1 + 1 / n + (newcat_1[1] - mean(x))^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
estimate = predict(cat_model, newdata=newcat_1)
n = length(cat_model$residuals)
degree_freedom = n - 2
x = cat_model$model[,2]
se = summary(cat_model)$sigma
alpha = 1 - level
conf = level + alpha/2
Sxx = sum((x - mean(x))^2)
rad = 1 + 1 / n + (newcat_1[1] - mean(x))^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
lower
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
calc_pred_int = function(model, newdata, level = 0.95) {
n = length(cat_model$residuals)
degree_freedom = n - 2
x = cat_model$model[,2]
se = summary(cat_model)$sigma
alpha = 1 - level
conf = level + alpha/2
Sxx = sum((x - mean(x))^2)
rad = 1 + 1 / n + (newdata[1] - mean(x))^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
return(list(estimate=estimate, lower=lower, upper=upper))
}
newcat_1 = data.frame(Bwt = 4.0)
value = calc_pred_int(cat_model, newcat_1)
value
calc_pred_int = function(model, newdata, level = 0.95) {
n = length(cat_model$residuals)
degree_freedom = n - 2
x = cat_model$model[,2]
se = summary(cat_model)$sigma
alpha = 1 - level
conf = level + alpha/2
Sxx = sum((x - mean(x))^2)
rad = 1 + 1 / n + (newdata[1] - mean(x))^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
return(list(estimate=estimate, lower=lower, upper=upper))
}
newcat_1 = data.frame(Bwt = 4.0)
value = calc_pred_int(cat_model, newcat_1)
newcat_1 = data.frame(Bwt = 4.0)
value = calc_pred_int(cat_model, newcat_1)
value
calc_pred_int = function(model, newdata, level = 0.95) {
estimate = predict(model, newdata = newdata)
n = length(model$residuals)
degree_freedom = n - 2
x = model$model[,2]
se = summary(model)$sigma
alpha = 1 - level
conf = level + alpha/2
Sxx = sum((x - mean(x))^2)
rad = 1 + 1/n + (newdata[1] - mean(x))^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
return(list(estimate=estimate, lower=lower, upper=upper))
}
new_weights = data.frame(Bwt = c(2.1))
value = calc_pred_int(cat_model, newdata = new_weights)
predict(cat_model, newdata = new_data, interval = c("prediction"), level = level)
value
newcat_1 = data.frame(Bwt = 4.0)
value = calc_pred_int(cat_model, newcat_1)
value
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
predict(cat_model, newdata = newcat_2, interval = c("prediction"), level = 0.99)
newcat_2 = data.frame(Bwt = 3.3)
value = calc_pred_int(cat_model, newcat_2, level = 0.99)
value
calc_pred_int = function(model, newdata, level = 0.95) {
estimate = predict(model, newdata = newdata)
n = length(model$residuals)
degree_freedom = n - 2
x = model$model[,2]
se = summary(model)$sigma
alpha = 1 - level
conf = level + alpha/2
Sxx = sum((x - mean(x))^2)
rad = 1 + 1/n + (newdata[1] - mean(x))^2/Sxx
lower = estimate - qt(conf, df = degree_freedom) * se * sqrt(rad)
upper = estimate + qt(conf, df = degree_freedom) * se * sqrt(rad)
return(list(estimate=estimate, lower=lower, upper=upper))
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
View(cat_model)
11.258630 - 10.618796
8.630513 - 7.599225
