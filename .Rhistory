install.packages("data.table")
install.packages("broom")
ToothGrowth$supp
ToothGrowth$num = as.numeric(ToothGrowth$supp)
ToothGrowth$num
as.numeric(ToothGrowth$supp)
ToothGrowth$num - 1
ToothGrowth$num = ToothGrowth$num - 1
tooth_model = lm(len ~ dose + num, data = ToothGrowth)
(tooth_model = lm(len ~ dose + num, data = ToothGrowth))
summary(tooth_model)$coefficients[1, 2]
summary(tooth_model)$coefficients[1, 1]
summary(tooth_model)$coefficients[2 , 1]
tooth_model = lm(len ~ dose * num, data = ToothGrowth)
summary(tooth_model)$coefficients[2 , 1]
ToothGrowth$dose_cat = as.factor(ToothGrowth$dose, levels(unique(ToothGrowth$dose)))
ToothGrowth$dose_cat = as.factor(ToothGrowth$dose, unique(ToothGrowth$dose))
ToothGrowth$dose_cat = as.factor(ToothGrowth$dose)
ToothGrowth$dose_cat
cat_model = lm(len ~ dose_cat + num, data = ToothGrowth)
summary(cat_model)
summary(cat_model)$coefficients[3, 1] - summary(cat_model)$coefficients[2, 1]
coef(cat_model)
library(MASS)
log_brain_model <- lm(log(brain)~log(body), data = mammals)
wt <- 1014.1 * 0.454
exp(predict(log_brain_model,newdata = data.frame(body = wt), interval = "prediction",level = 0.90))
View(log_brain_model)
head(mammals)
lcs_model = lm(sr ~ ., data = LifeCycleSavings)
cooks.distance(lcs_model)[which.max(abs(cooks.distance(lcs_model)))]
cooks.distance(lcs_model)
sort(cooks.distance(lcs_model))
model = lm(Hwt ~ Bwt, data = cats)
model = lm(brain ~ body, data = mammals)
data_1 = data.frame(x = runif(n = 30, min = 0, max = 10),
y = rep(x = 0, times = 30))
data_1$y = with(data_1, 2 + 1 * x + rexp(n = 30))
fit_1 = lm(y ~ x, data = data_1)
summary = summary(fit_1)
summary$adj.r.squared
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
library(readxl)
dataset <- read_excel("C:\StatisticalModeling\group-project\nba_stats.xlsx")
View(dataset)
library(readxl)
dataset <- read_excel("C:/StatisticalModeling/group-project/nba_stats.xlsx")
View(dataset)
?read_excel
library(readxl)
dataset <- read_xlsx("C:/StatisticalModeling/group-project/nba_stats.xlsx")
View(dataset)
dataset <- read_xlsx("C:/StatisticalModeling/group-project/nba_stats.xlsx", col_names = TRUE)
dataset <- read_xlsx("C:/StatisticalModeling/group-project/nba_stats.xlsx", skip = 1)
dataset = dataset[, -2]
dataset <- read_xlsx("C:/StatisticalModeling/group-project/nba_stats.xlsx", skip = 1)
dataset = dataset[, -1]
model = lm(VI ~ GP + USG + Tor + X2PA + EFG + TS + PPGPoints +
RPG + TRB + APGAssists + ASTAssists + ORTG, data = dataset)
dataset <- read_xlsx("C:/StatisticalModeling/group-project/nba_stats.xlsx", skip = 1, col_types = c("Rank", "Name", "Team", "POS", "Age", "GP", "MPG", "MIN", "USG", "TOR", "FTA", "FTPer", "2PA", "2PPer", "3PA", "3PPER", "EFG", "TS", "PPG", "RPG", "TRB", "APG", "AST", "ASTPER", "SPG", "BPG", "TOPG", "VI", "ORTG", "DRTG"))
dataset <- read_xlsx("C:/StatisticalModeling/group-project/nba_stats.xlsx", skip = 1, col_names = c("Rank", "Name", "Team", "POS", "Age", "GP", "MPG", "MIN", "USG", "TOR", "FTA", "FTPer", "2PA", "2PPer", "3PA", "3PPER", "EFG", "TS", "PPG", "RPG", "TRB", "APG", "AST", "ASTPER", "SPG", "BPG", "TOPG", "VI", "ORTG", "DRTG"))
dataset <- read_xlsx("C:/StatisticalModeling/group-project/nba_stats.xlsx", skip = 1, col_names = c("Rank", "Name", "Team", "POS", "Age", "GP", "MPG", "MIN", "USG", "TOR", "FTA", "FTPer", "2PA", "2PPer", "3PA", "3PPER", "EFG", "TS", "PPG", "RPG", "TRB", "APG", "ASTPER", "SPG", "BPG", "TOPG", "VI", "ORTG", "DRTG"))
model = lm(VI ~ GP + USG + Tor + X2PA + EFG + TS + PPGPoints +
+                RPG + TRB + APGAssists + ASTAssists + ORTG, data = dataset)
model = lm(VI ~ 1, data = dataset)
model = lm(VI ~ ., data = dataset)
dataset = dataset[, -1]
model = lm(VI ~ ., data = dataset)
model = lm(VI ~ 1, data = dataset)
clean_data = dataset[complete.cases(dataset), ]
model = lm(VI ~ 1, data = clean_data)
clean_data = na.omit(dataset)
model = lm(VI ~ 1, data = clean_data)
View(clean_data)
dataset <- read_xlsx("C:/StatisticalModeling/group-project/nba_stats.xlsx", skip = 0, col_names = c("Rank", "Name", "Team", "POS", "Age", "GP", "MPG", "MIN", "USG", "TOR", "FTA", "FTPer", "2PA", "2PPer", "3PA", "3PPER", "EFG", "TS", "PPG", "RPG", "TRB", "APG", "ASTPER", "SPG", "BPG", "TOPG", "VI", "ORTG", "DRTG"))
dataset = dataset[-1,]
View(dataset)
dataset <- read_xlsx("C:/StatisticalModeling/group-project/nba_stats.xlsx", skip = 1, col_names = c("Rank", "Name", "Team", "POS", "Age", "GP", "MPG", "MIN", "USG", "TOR", "FTA", "FTPer", "2PA", "2PPer", "3PA", "3PPER", "EFG", "TS", "PPG", "RPG", "TRB", "APG", "ASTPER", "SPG", "BPG", "TOPG", "VI", "ORTG", "DRTG"))
dataset = dataset[-1,]
dataset = dataset[, -1]
clean_data = na.omit(dataset)
model = lm(VI ~ 1, data = clean_data)
step(model, direction = "forward")
step(model,)
step(model, scope = MPG + GP + FTPER + 2PPER + 3PPER + EFG + PPG + RPG + TGB + APG)
step(model, scope = MPG + GP + FTPER + 2PPER + 3PPER + EFG + PPG + RPG + TGB + APG, direction = "forward")
step(model, scope = VI ~ MPG + GP + FTPER + 2PPER + 3PPER + EFG + PPG + RPG + TGB + APG, direction = "forward")
step(
hipcenter_mod_start,
scope = VI ~ MPG + GP + FTPER + 2PPER + 3PPER + EFG + PPG + RPG + TGB + APG,
direction = "forward")
step(model, scope = VI ~ MPG + GP + FTPER + 2PPER + 3PPER + EFG + PPG + RPG + TGB + APG, direction = "forward")
View(clean_data)
write.csv(clean_data, "clean_data.csv")
test_imp = read.csv(clean_data.csv)
test_imp = read.csv("clean_data.csv")
View(test_imp)
step(model, scope = VI ~ MPG + FTPer + 2PPER + 3PPER + EFG + PPG + RPG + TGB + APG, direction = "forward")
step(model, scope = VI ~ MPG + FTPer + 2PPer + 3PPER + EFG + PPG + RPG + TGB + APG, direction = "forward")
step(model, scope = VI ~ MPG + FTPer + 2PPer + 3PPER + EFG + PPG + RPG + TRB + APG, direction = "forward")
step(model, scope = VI ~ MPG + FTPer + EFG + PPG + RPG + TRB + APG, direction = "forward")
sel_model = step(model, scope = VI ~ MPG + FTPer + EFG + PPG + RPG + TRB + APG, direction = "forward")
summary(sel_model)
back_model = lm(VI ~ APG + PPG + RPG + TRB + EFG, data = clean_data)
back_step_model = step(back_model)
summary(back_step_model)
clean_data$PPG
is.numeric(clean_data$PPG)
clean_data$PPG = as.numeric(clean_data$PPG)
clean_data$APG = as.numeric(clean_data$APG)
clean_data$RPG = as.numeric(clean_data$RPG)
start_model = lm(VI ~ 1, data = clean_data)
sel_model = step(model, scope = VI ~ PPG + RPG + APG, direction = "forward")
summary(sel_model)
sel_model = step(model, scope = VI ~ PPG * RPG * APG, direction = "forward")
summary(sel_model)
clean_imp_data = read.csv("clean_data.csv")
View(clean_imp_data)
start_model = lm(VI ~ 1, data = clean_imp_data)
sel_model = step(model, scope = VI ~ PPG * RPG * APG, direction = "forward")
summary(sel_model)
start_model = lm(VI ~ 1, data = clean_imp_data)
sel_model = step(start_model, scope = VI ~ PPG * RPG * APG, direction = "forward")
summary(sel_model)
sel_model = step(start_model, scope = VI ~ PPG * RPG * APG, direction = "forward", k = log(n))
n = length(resid(start_model))
sel_model = step(start_model, scope = VI ~ PPG * RPG * APG, direction = "forward", k = log(n))
summary(sel_model)
clean_imp_data$Name == "Stephen Curry"
clean_imp_data[139, ]
View(clean_imp_data)
fitted(sel_model)[139]
resid(sel_model)
sum(resid(sel_model))
clean_imp_data[, -1]
clean_imp_data = clean_imp_data[, -1]
clean_dup_imp_data = clean_imp_data[ !duplicated(clean_imp_data$Name), ]
start_model = lm(VI ~ 1, data = clean_dup_imp_data)
sel_model = step(start_model, scope = VI ~ APG + PPG + RPG, direction = "forward")
summary(sel_model)
sel_model = step(start_model, scope = VI ~ APG * PPG * RPG, direction = "forward")
summary(sel_model)
sel_model = step(start_model, scope = VI ~ APG * PPG * RPG, direction = "forward")
View(clean_dup_imp_data)
model = lm(mpg ~ ., data = mtcars)
vif(model)
library(faraway)
vif(model)
summary(model)$adj.r.squared
step_model = step(model)
summary(step_model)
sqrt(mean((resid(step_model) / (1 - hatvalues(step_model))) ^ 2))
vif(step_model)
vif(model)
n = length(resid(model))
start_model = lm(mpg ~ 1, data = mtcars)
for_model = step(start_model, scope = mpg ~ wt + drat + cyl + vs + qsec + carb + am, direction = "forward")
summary(for_model)
for_model = step(start_model, scope = mpg ~ wt + drat + cyl + vs + qsec + carb + am, direction = "forward", k = log(n))
summary(for_model)
sqrt(mean((resid(for_model) / (1 - hatvalues(for_model))) ^ 2))
?LifeCycleSavings
small_model = lm(sr ~ pop15 + pop75 + dpi, data = LifeCycleSavings)
big_model = lm(ddpi ~ pop15 + pop75 + dpi, data = LifeCycleSavings)
cor(resid(small_model), resid(big_model))
life_model = lm(sr ~ (pop15 + pop75 + dpi + ddpi) ^ 2, data = LifeCycleSavings)
summary(life_model)$adj.r.squared
summary(life_model)
n = length(resid(life_model))
back_model = step(life_model, k = log(n))
summary(back_model)
n = length(resid(life_model))
back_model = step(life_model, direction = "backward", k = log(n))
n = length(resid(life_model))
back_model = step(life_model, direction = "backward")
summary(back_model)
summary(life_model)
life_model_2 = lm(sr ~ pop15 + pop75 + dpi + ddpi +(pop15 + pop75 + dpi + ddpi) ^ 2, data = LifeCycleSavings)
summary(life_model_2)
n = length(resid(life_model_2))
back_model = step(life_model_2, direction = "backward")
